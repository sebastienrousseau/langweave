// Copyright ¬© 2024 LangWeave. All rights reserved.
// SPDX-License-Identifier: Apache-2.0 OR MIT

//! # LangWeave Language Detector Examples
//!
//! This program demonstrates the usage of the LanguageDetector
//! in the LangWeave library, showcasing its capabilities for
//! detecting languages in various scenarios.

use langweave::language_detector::LanguageDetector;
use langweave::language_detector_trait::LanguageDetectorTrait;

/// Entry point for the LangWeave Language Detector Examples program.
///
/// This program demonstrates the usage of the LanguageDetector
/// in the LangWeave library, showcasing its capabilities for
/// detecting languages in various scenarios.
///
/// # Errors
///
/// This function returns a `Result` containing a `Box<dyn std::error::Error>` if any error occurs during
/// the execution of the examples.
#[tokio::main]
pub(crate) async fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("\nüß™ LangWeave Language Detector Examples\n");

    simple_detection_example().await?;
    multi_language_detection_example().await?;
    short_text_detection_example().await?;
    non_latin_script_detection_example().await?;
    mixed_language_detection_example().await?;
    error_handling_example().await?;

    println!(
        "\nüéâ All language detector examples completed successfully!"
    );

    Ok(())
}

/// Demonstrates simple language detection for common languages.
async fn simple_detection_example(
) -> Result<(), Box<dyn std::error::Error>> {
    println!("ü¶Ä Simple Language Detection Example");
    println!("---------------------------------------------");

    let detector = LanguageDetector::new();

    let texts = vec![
        "Hello, how are you?",
        "Bonjour, comment allez-vous ?",
        "Hallo, wie geht es dir?",
        "Hola, ¬øc√≥mo est√°s?",
    ];

    for text in texts {
        match detector.detect_async(text).await {
            Ok(lang) => println!(
                "    ‚úÖ Detected language for '{}': {}",
                text, lang
            ),
            Err(e) => println!(
                "    ‚ùå Error detecting language for '{}': {:?}",
                text, e
            ),
        }
    }

    Ok(())
}

/// Demonstrates language detection for multiple languages.
async fn multi_language_detection_example(
) -> Result<(), Box<dyn std::error::Error>> {
    println!("\nü¶Ä Multi-Language Detection Example");
    println!("---------------------------------------------");

    let detector = LanguageDetector::new();

    let texts = vec![
        "Hello world",      // English
        "Bonjour le monde", // French
        "Hallo Welt",       // German
        "Ciao mondo",       // Italian
        "Ol√° mundo",        // Portuguese
        "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä",      // Russian
        "‰Ω†Â•ΩÔºå‰∏ñÁïå",       // Chinese
        "„Åì„Çì„Å´„Å°„ÅØ„ÄÅ‰∏ñÁïå", // Japanese
        "ÏïàÎÖïÌïòÏÑ∏Ïöî, ÏÑ∏ÏÉÅ", // Korean
        "ŸÖÿ±ÿ≠ÿ®ÿß ÿ®ÿßŸÑÿπÿßŸÑŸÖ",    // Arabic
    ];

    for text in texts {
        match detector.detect_async(text).await {
            Ok(lang) => println!(
                "    ‚úÖ Detected language for '{}': {}",
                text, lang
            ),
            Err(e) => println!(
                "    ‚ùå Error detecting language for '{}': {:?}",
                text, e
            ),
        }
    }

    Ok(())
}

/// Demonstrates language detection for short texts.
async fn short_text_detection_example(
) -> Result<(), Box<dyn std::error::Error>> {
    println!("\nü¶Ä Short Text Detection Example");
    println!("---------------------------------------------");

    let detector = LanguageDetector::new();

    let texts = vec![
        "Hi",
        "Oi",
        "Hej",
        "Salut",
        "Ciao",
        "„Åì„Çì„Å´„Å°„ÅØ",
        "ÏïàÎÖï",
        "‰Ω†Â•Ω",
    ];

    for text in texts {
        match detector.detect_async(text).await {
            Ok(lang) => println!(
                "    ‚úÖ Detected language for '{}': {}",
                text, lang
            ),
            Err(e) => println!(
                "    ‚ùå Error detecting language for '{}': {:?}",
                text, e
            ),
        }
    }

    Ok(())
}

/// Demonstrates language detection for non-Latin scripts.
async fn non_latin_script_detection_example(
) -> Result<(), Box<dyn std::error::Error>> {
    println!("\nü¶Ä Non-Latin Script Detection Example");
    println!("---------------------------------------------");

    let detector = LanguageDetector::new();

    let texts = vec![
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –º–∏—Ä",  // Russian
        "„Åì„Çì„Å´„Å°„ÅØ„ÄÅ‰∏ñÁïå", // Japanese
        "ÏïàÎÖïÌïòÏÑ∏Ïöî, ÏÑ∏ÏÉÅ", // Korean
        "‰Ω†Â•ΩÔºå‰∏ñÁïå",       // Chinese
        "ŸÖÿ±ÿ≠ÿ®ÿß ÿ®ÿßŸÑÿπÿßŸÑŸÖ",    // Arabic
        "Œ≥ŒµŒπŒ¨ œÉŒøœÖ Œ∫œåœÉŒºŒµ",   // Greek
        "◊©◊ú◊ï◊ù ◊¢◊ï◊ú◊ù",        // Hebrew
        "‡§®‡§Æ‡§∏‡•ç‡§§‡•á ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ",       // Hindi
    ];

    for text in texts {
        match detector.detect_async(text).await {
            Ok(lang) => println!(
                "    ‚úÖ Detected language for '{}': {}",
                text, lang
            ),
            Err(e) => println!(
                "    ‚ùå Error detecting language for '{}': {:?}",
                text, e
            ),
        }
    }

    Ok(())
}

/// Demonstrates language detection for mixed language texts.
async fn mixed_language_detection_example(
) -> Result<(), Box<dyn std::error::Error>> {
    println!("\nü¶Ä Mixed Language Detection Example");
    println!("---------------------------------------------");

    let detector = LanguageDetector::new();

    let texts = vec![
        "Hello monde",        // English + French
        "Hola world",         // Spanish + English
        "Bonjour ‰∏ñÁïå",       // French + Chinese
        "„Åì„Çì„Å´„Å°„ÅØ world",   // Japanese + English
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π world",   // Russian + English
        "Hello ‡§®‡§Æ‡§∏‡•ç‡§§‡•á Bonjour", // English + Hindi + French
    ];

    for text in texts {
        match detector.detect_async(text).await {
            Ok(lang) => println!(
                "    ‚úÖ Detected language for '{}': {}",
                text, lang
            ),
            Err(e) => println!(
                "    ‚ùå Error detecting language for '{}': {:?}",
                text, e
            ),
        }
    }

    Ok(())
}

/// Demonstrates error handling in language detection.
async fn error_handling_example(
) -> Result<(), Box<dyn std::error::Error>> {
    println!("\nü¶Ä Error Handling Example");
    println!("---------------------------------------------");

    let detector = LanguageDetector::new();

    let texts = vec![
        "",           // Empty string
        "123456789",  // Only numbers
        "!@#$%^&*()", // Only symbols
        "   ",        // Only whitespace
    ];

    for text in texts {
        match detector.detect_async(text).await {
            Ok(lang) => println!(
                "    ‚úÖ Unexpectedly detected language for '{}': {}",
                text, lang
            ),
            Err(e) => println!(
                "    ‚ùå Expected error for '{}': {:?}",
                text, e
            ),
        }
    }

    Ok(())
}
